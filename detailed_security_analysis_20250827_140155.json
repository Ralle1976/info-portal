{
  "timestamp": "2025-08-27T14:01:55.090581",
  "analysis_type": "MANUAL_CODE_REVIEW",
  "project_root": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal",
  "vulnerabilities": [
    {
      "category": "XSS_TEMPLATE",
      "severity": "HIGH",
      "title": "Unsafe Template Output",
      "findings": [
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/templates/help/faq.html",
          "pattern": "answer|safe",
          "risk": "HIGH",
          "description": "Unescaped output - potential XSS"
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/templates/kiosk/enhanced.html",
          "pattern": "hours|safe",
          "risk": "HIGH",
          "description": "Unescaped output - potential XSS"
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/templates/legal/privacy_policy.html",
          "pattern": "content | safe",
          "risk": "HIGH",
          "description": "Unescaped output - potential XSS"
        }
      ],
      "recommendation": "Review all |safe usage and ensure content is properly sanitized"
    },
    {
      "category": "SQL_INJECTION",
      "severity": "CRITICAL",
      "title": "Raw SQL Execution Found",
      "description": "Direct SQL execution without parameterization detected",
      "recommendation": "Replace with parameterized queries"
    },
    {
      "category": "SQL_INJECTION",
      "severity": "MEDIUM",
      "title": "Potential SQL Injection Vectors",
      "findings": [
        {
          "file": "app/routes_admin.py",
          "pattern": "session\\.exec\\s*\\(\\s*[\"\\'](?!select|SELECT)[^\"\\']*[\"\\']",
          "matches": [
            "session.exec(\"DELETE FROM settings\"",
            "session.exec(\"DELETE FROM announcements WHERE id > 0\"",
            "session.exec(\"DELETE FROM availability WHERE id > 0\"",
            "session.exec(\"DELETE FROM hour_exceptions WHERE id > 0\""
          ],
          "risk": "HIGH"
        },
        {
          "file": "app/routes_admin.py",
          "pattern": "f[\"\\'].*?{.*?}.*?[\"\\']",
          "matches": [
            "f\"Rate limit exceeded for IP {ip} on {request.endpoint}\"",
            "f\"CSRF validation failed for {request.endpoint} - IP: {request.remote_addr} - Token: {'",
            "f\"Admin action: {json.dumps(log_entry)}\"",
            "f\"Login attempt for locked account: {username}\"",
            "f\"Successful database login for user: {username}\""
          ],
          "risk": "HIGH"
        },
        {
          "file": "app/routes_public.py",
          "pattern": "f[\"\\'].*?{.*?}.*?[\"\\']",
          "matches": [
            "f\"Could not load services from config: {e}\"",
            "f\"Error: {str(e)}\"",
            "f\"No admin translations found for language: {language}\"",
            "f\"Error serving admin translation file for {language}: {e}\""
          ],
          "risk": "HIGH"
        },
        {
          "file": "app/routes_legal.py",
          "pattern": "f[\"\\'].*?{.*?}.*?[\"\\']",
          "matches": [
            "f\"Error loading purposes: {e}\"",
            "f\"Error loading purposes for banner: {e}\"",
            "f\"Error loading legal dashboard data: {e}\"",
            "f'Database error: {str(db_error)}'",
            "f'Error creating document: {str(e)}'"
          ],
          "risk": "HIGH"
        },
        {
          "file": "app/services/status.py",
          "pattern": "f[\"\\'].*?{.*?}.*?[\"\\']",
          "matches": [
            "f\"{status.type} ({status.date_from} - {status.date_to})\""
          ],
          "risk": "HIGH"
        },
        {
          "file": "app/services/schedule.py",
          "pattern": "f[\"\\'].*?{.*?}.*?[\"\\']",
          "matches": [
            "f\"Error updating weekly hours: {e}\""
          ],
          "risk": "HIGH"
        }
      ]
    },
    {
      "category": "AUTHENTICATION",
      "severity": "HIGH",
      "title": "Authentication Implementation Issues",
      "findings": [
        {
          "pattern": "admin_pass\\s*=\\s*os\\.getenv.*?[\"\\']admin123[\"\\']",
          "description": "Default password in code",
          "risk": "HIGH"
        },
        {
          "pattern": "username\\s*==.*?and\\s*password\\s*==",
          "description": "Simple string comparison authentication",
          "risk": "HIGH"
        },
        {
          "pattern": "admin123",
          "matches": [
            "admin123",
            "admin123"
          ],
          "description": "Potential hardcoded credentials",
          "risk": "HIGH"
        },
        {
          "pattern": "password.*?=.*?[\"\\'][^\"\\']{1,20}[\"\\']",
          "matches": [
            "password', methods=['GET'",
            "password = request.form.get('current_password'",
            "password = request.form.get('new_password'",
            "password = request.form.get('confirm_password'"
          ],
          "description": "Potential hardcoded credentials",
          "risk": "HIGH"
        }
      ]
    },
    {
      "category": "INPUT_SANITIZATION",
      "severity": "MEDIUM",
      "title": "Incomplete Input Sanitization",
      "issues": [
        "Missing HTML escaping",
        "No SQL injection protection",
        "Insufficient script tag protection"
      ]
    },
    {
      "category": "SESSION_SECURITY",
      "severity": "MEDIUM",
      "title": "Session Configuration Issues",
      "issues": [
        "Default development secret key used"
      ]
    },
    {
      "category": "FILE_UPLOAD",
      "severity": "HIGH",
      "title": "File Upload Security Issues",
      "issues": [
        "File type validation",
        "File size limits",
        "Malware scanning",
        "File type validation",
        "File size limits",
        "Malware scanning"
      ]
    },
    {
      "category": "SENSITIVE_DATA_EXPOSURE",
      "severity": "HIGH",
      "title": "Sensitive Data in Code/Config",
      "findings": [
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/detailed_security_analysis.py",
          "issue": "Hardcoded password",
          "matches": [
            "password\\s*==', \"",
            "password.*?=.*?[\"\\'",
            "password.*?=.*?[\"\\'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/detailed_security_analysis.py",
          "issue": "Hardcoded secret",
          "matches": [
            "secret.*?=.*?[\"\\'",
            "secret.*?=.*?[\"\\'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/detailed_security_analysis.py",
          "issue": "Hardcoded API key",
          "matches": [
            "api_key.*?=.*?[\"\\'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/emergency_admin_reset.py",
          "issue": "Hardcoded password",
          "matches": [
            "password: str, username: str = \"admin\"",
            "PASSWORD='):\n            lines[i] = f'",
            "PASSWORD={new_password}\\n'\n            updated_password = True\n        elif line.startswith('"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/fix_admin_login.py",
          "issue": "Hardcoded password",
          "matches": [
            "password_hash=generate_password_hash(\"admin123\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/fix_admin_login.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin = session.exec(select(AdminUser).where(AdminUser.username == \"admin\"",
            "admin = session.exec(select(AdminUser).where(AdminUser.username == \"admin\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/manual_functionality_test.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin_keys = len(data.get('admin'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/quick_admin_reset.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = \"admin123\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/quick_admin_reset.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin = session.exec(select(AdminUser).where(AdminUser.username == \"admin\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/reset_admin_password.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = ''.join(secrets.choice(alphabet) for _ in range(length))\n    return password\n\ndef hash_password(password: str) -> str:\n    \"",
            "PASSWORD='):\n                    lines[i] = f'",
            "PASSWORD={new_password}\\n'\n                    password_line_found = True\n                    break\n            \n            if not password_line_found:\n                lines.append(f'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/security_test_suite.py",
          "issue": "Hardcoded password",
          "matches": [
            "password,1,1) FROM adminuser WHERE username='admin'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/security_test_suite.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin_user: str = \"admin\"",
            "admin' AND (SELECT SUBSTRING(password,1,1) FROM adminuser WHERE username='admin'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/simple_admin_reset.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = \"admin123\"",
            "PASSWORD='):\n                lines[i] = f'",
            "PASSWORD={new_password}\\n'\n                found = True\n                break\n        \n        if not found:\n            lines.append(f'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/test_authenticated_admin.py",
          "issue": "Default admin credentials",
          "matches": [
            "ADMIN_USER = \"admin\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/test_session_language_persistence.py",
          "issue": "Default admin credentials",
          "matches": [
            "ADMIN_USER = \"admin\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/flask_httpauth.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = encoded_password.decode('utf-8'",
            "password = encoded_password.decode('latin1'",
            "password = \"\"\n        if self.verify_password_callback:\n            return self.ensure_sync(self.verify_password_callback)(\n                username, client_password)\n        if not auth:\n            return\n        if self.hash_password_callback:\n            try:\n                client_password = self.ensure_sync(\n                    self.hash_password_callback)(client_password)\n            except TypeError:\n                client_password = self.ensure_sync(\n                    self.hash_password_callback)(username, client_password)\n        return auth.username if client_password is not None and \\\n            stored_password is not None and \\\n            hmac.compare_digest(client_password, stored_password) else None\n\n\nclass HTTPDigestAuth(HTTPAuth):\n    def __init__(self, scheme=None, realm=None, use_ha1_pw=False, qop='"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/flask/config.py",
          "issue": "Hardcoded secret",
          "matches": [
            "SECRET_KEY = 'development key'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/flask/sansio/app.py",
          "issue": "Hardcoded secret",
          "matches": [
            "secret_key = ConfigAttribute[t.Union[str, bytes, None]](\"SECRET_KEY\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password or \"\"\n\n            # Store any acquired credentials.\n            self.passwords[netloc] = (username, password)\n\n        assert (\n            # Credentials were found\n            (username is not None and password is not None)\n            # Credentials were not found\n            or (username is None and password is None)\n        ), f\"",
            "password = ask_password(\"Password: \""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_internal/utils/misc.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = \"\"\n    else:\n        user = urllib.parse.quote(user)\n        password = \""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = prefix.split(':'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password.encode(\"latin1\"",
            "password == getattr(other, \"password\"",
            "password == getattr(other, \"password\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "issue": "Hardcoded password",
          "matches": [
            "password={password!r}\")\n\n        fruit = Prompt.ask(\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password.encode(\"utf-8\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=self._socks_options[\"password\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pydantic/types.py",
          "issue": "Hardcoded password",
          "matches": [
            "password='password1'",
            "password=SecretStr('**********'",
            "password', 'password_bytes', when_used='json'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pydantic/types.py",
          "issue": "Hardcoded secret",
          "matches": [
            "SecretType = TypeVar('SecretType'",
            "SecretStr('**********') password_bytes=SecretBytes(b'**********'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pydantic/v1/env_settings.py",
          "issue": "Hardcoded secret",
          "matches": [
            "SecretsSettingsSource(secrets_dir={self.secrets_dir!r})'\n\n\ndef read_env_file(\n    file_path: StrPath, *, encoding: str = None, case_sensitive: bool = False\n) -> Dict[str, Optional[str]]:\n    try:\n        from dotenv import dotenv_values\n    except ImportError as e:\n        raise ImportError('"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/pydantic/v1/networks.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=parts['password'",
            "password=parts['password'",
            "password=parts['password'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/requests/auth.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password.encode(\"latin1\"",
            "password == getattr(other, \"password\"",
            "password == getattr(other, \"password\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/pyodbc.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=\"tiger\"",
            "password=\"tiger\"",
            "password=\"tiger\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/base.py",
          "issue": "Hardcoded password",
          "matches": [
            "password == func.md5(\"plaintext\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/mysqldb.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=\"passwd\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/cx_oracle.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=\"tiger\"",
            "password=\"tiger\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/oracledb.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=\"tiger\"",
            "password=\"tiger\"",
            "password=\"tiger\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/provision.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=\"xe\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py",
          "issue": "Hardcoded password",
          "matches": [
            "password@/dbname?host=HostA:5432&host=HostB:5432&host=HostC:5432\"\n    )\n\nFor complete background on this syntax, see :ref:`psycopg2_multi_host`.\n\n.. versionadded:: 2.0.18\n\n.. seealso::\n\n    :ref:`psycopg2_multi_host`\n\n.. _asyncpg_prepared_statement_cache:\n\nPrepared Statement Cache\n--------------------------\n\nThe asyncpg SQLAlchemy dialect makes use of ``asyncpg.connection.prepare()``\nfor all statements.   The prepared statement objects are cached after\nconstruction which appears to grant a 10% or more performance improvement for\nstatement invocation.   The cache is on a per-DBAPI connection basis, which\nmeans that the primary storage for prepared statements is within DBAPI\nconnections pooled within the connection pool.   The size of this cache\ndefaults to 100 statements per DBAPI connection and may be adjusted using the\n``prepared_statement_cache_size`` DBAPI argument (note that while this argument\nis implemented by SQLAlchemy, it is part of the DBAPI emulation portion of the\nasyncpg dialect, therefore is handled as a DBAPI argument, not a dialect\nargument)::\n\n\n    engine = create_async_engine(\n        \""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py",
          "issue": "Hardcoded password",
          "matches": [
            "password@/dbname?host=/var/lib/postgresql\"\n    )\n\n.. warning::  The format accepted here allows for a hostname in the main URL\n   in addition to the \"",
            "password@myhost1/dbname?host=myhost2\"\n        )\n\n   Above, the hostname ``myhost1`` is **silently ignored and discarded.**  The\n   host which is connected is the ``myhost2`` host.\n\n   This is to maintain some degree of compatibility with PostgreSQL'",
            "password@/dbname?host=HostA:PortA&host=HostB&host=HostC:PortC\"\n    )\n\nAs an alternative, libpq query string format also may be used; this specifies\n``host`` and ``port`` as single query string arguments with comma-separated\nlists - the default port can be chosen by indicating an empty value\nin the comma separated list::\n\n    create_engine(\n        \""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/provision.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=\"test\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/engine/events.py",
          "issue": "Hardcoded password",
          "matches": [
            "password\"] = \"some_password\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
          "issue": "Hardcoded password",
          "matches": [
            "password), safe=\" +\"",
            "password\"] = unquote(components[\"password\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/testing/profiling.py",
          "issue": "Hardcoded API key",
          "matches": [
            "api_key = config.db.name + \"_\"",
            "api_key += \"_file\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/sqlalchemy/testing/plugin/plugin_base.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=False)}\\n\"\n                )\n\n    expanded_urls = list(provision.generate_db_urls(db_urls, extra_drivers))\n\n    for db_url in expanded_urls:\n        log.info(\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/urllib3/contrib/pyopenssl.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password.encode(\"utf-8\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/urllib3/contrib/socks.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=self._socks_options[\"password\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/werkzeug/security.py",
          "issue": "Hardcoded password",
          "matches": [
            "password: str, method: str = \"scrypt\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/werkzeug/urls.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = quote(parts.password, safe=\"%!$&'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/werkzeug/datastructures/auth.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = base64.b64decode(rest).decode().partition(\":\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/werkzeug/debug/tbtools.py",
          "issue": "Hardcoded secret",
          "matches": [
            "SECRET = \"%(secret)s\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/.venv/lib/python3.12/site-packages/werkzeug/debug/__init__.py",
          "issue": "Hardcoded secret",
          "matches": [
            "secret = request.args.get(\"s\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/database.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = os.getenv('ADMIN_PASSWORD'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/database.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin_username = os.getenv('ADMIN_USERNAME', 'admin'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/routes_admin.py",
          "issue": "Hardcoded password",
          "matches": [
            "password', methods=['GET'",
            "password = request.form.get('current_password'",
            "password = request.form.get('new_password'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/routes_admin.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin_bp = Blueprint('admin'",
            "admin_user = os.getenv('ADMIN_USERNAME', 'admin'",
            "admin_user = os.getenv('ADMIN_USERNAME', 'admin'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/routes_legal.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = os.getenv('ADMIN_PASSWORD'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/routes_legal.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin_username = os.getenv('ADMIN_USERNAME', 'admin'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/routes_public.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin_translations = full_translations.get('admin'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/__init__.py",
          "issue": "Hardcoded secret",
          "matches": [
            "secret_key = os.getenv('SECRET_KEY'",
            "secret_key or secret_key == 'dev-secret-key'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/app/services/status.py",
          "issue": "Default admin credentials",
          "matches": [
            "admin_user: str = \"admin\"",
            "admin_user: str = \"admin\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password or \"\"\n\n            # Store any acquired credentials.\n            self.passwords[netloc] = (username, password)\n\n        assert (\n            # Credentials were found\n            (username is not None and password is not None)\n            # Credentials were not found\n            or (username is None and password is None)\n        ), f\"",
            "password = ask_password(\"Password: \""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_internal/utils/misc.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = \"\"\n    else:\n        user = urllib.parse.quote(user)\n        password = \""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = prefix.split(':'"
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password.encode(\"latin1\"",
            "password == getattr(other, \"password\"",
            "password == getattr(other, \"password\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "issue": "Hardcoded password",
          "matches": [
            "password={password!r}\")\n\n        fruit = Prompt.ask(\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
          "issue": "Hardcoded password",
          "matches": [
            "password = password.encode(\"utf-8\""
          ]
        },
        {
          "file": "/mnt/c/Users/tango/Desktop/Homepage/qr-info-portal/qr-info-portal/.venv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
          "issue": "Hardcoded password",
          "matches": [
            "password=self._socks_options[\"password\""
          ]
        }
      ]
    },
    {
      "category": "LOGGING_SECURITY",
      "severity": "MEDIUM",
      "title": "Logging Security Issues",
      "issues": [
        "Potential sensitive data logging: log.*?secret",
        "Log file permissions not explicitly set"
      ]
    }
  ],
  "summary": {
    "total": 9,
    "critical": 1,
    "high": 4,
    "medium": 4
  }
}