name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create .env file
        run: |
          echo "SECRET_KEY=test-secret-key-for-ci" > .env
          echo "ADMIN_USERNAME=testadmin" >> .env
          echo "ADMIN_PASSWORD=testpass123" >> .env
          echo "FLASK_ENV=testing" >> .env
          echo "SITE_URL=http://localhost:5000" >> .env
          
      - name: Run tests
        run: |
          pytest tests/ -v --tb=short
          
      - name: Test application startup
        run: |
          python -c "from app import create_app; app = create_app(); print('✅ App created successfully')"
          
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          
      - name: Run Black (formatting check)
        run: |
          black --check app/ --exclude="app/static/" || echo "⚠️ Code formatting issues found (non-blocking)"
          
      - name: Run isort (import sorting)
        run: |
          isort --check-only app/ || echo "⚠️ Import sorting issues found (non-blocking)"
          
      - name: Run Flake8 (basic linting)
        run: |
          flake8 app/ --max-line-length=127 --extend-ignore=E203,W503,E501 --exclude="app/static/" || echo "⚠️ Linting issues found (non-blocking)"

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run Bandit security scan
        run: |
          bandit -r app/ -ll || echo "⚠️ Security issues found (non-blocking)"
          
      - name: Check dependencies for vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check || echo "⚠️ Dependency vulnerabilities found (non-blocking)"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          docker build -t qr-info-portal:${{ github.sha }} .
          
      - name: Test Docker image
        run: |
          docker run -d -p 5000:5000 --name test-container \
            -e SECRET_KEY=test-key \
            -e ADMIN_USERNAME=admin \
            -e ADMIN_PASSWORD=testpass \
            qr-info-portal:${{ github.sha }}
          
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:5000/healthz || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container