name: Security Monitoring & Alerting

on:
  schedule:
    # Daily security monitoring at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - compliance

env:
  PYTHON_VERSION: '3.11'

jobs:
  vulnerability-monitoring:
    name: Daily Vulnerability Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit osv-scanner
          pip install -r requirements.txt
          
      - name: Generate vulnerability report
        run: |
          echo "# Daily Security Vulnerability Report" > vuln-report.md
          echo "Generated: $(date)" >> vuln-report.md
          echo "Repository: ${{ github.repository }}" >> vuln-report.md
          echo "" >> vuln-report.md
          
          # Safety check
          echo "## Safety Check (PyPA Database)" >> vuln-report.md
          safety check --json --output safety-daily.json || true
          
          if [ -s safety-daily.json ]; then
            vuln_count=$(jq '.report.vulnerabilities | length' safety-daily.json)
            echo "🚨 **$vuln_count vulnerabilities found**" >> vuln-report.md
            echo "" >> vuln-report.md
            echo "<details>" >> vuln-report.md
            echo "<summary>Click to see details</summary>" >> vuln-report.md
            echo "" >> vuln-report.md
            echo '```json' >> vuln-report.md
            cat safety-daily.json >> vuln-report.md
            echo '```' >> vuln-report.md
            echo "</details>" >> vuln-report.md
          else
            echo "✅ No vulnerabilities found in Safety database" >> vuln-report.md
          fi
          
          echo "" >> vuln-report.md
          
          # OSV Scanner
          echo "## OSV Scanner (Google Open Source Vulnerabilities)" >> vuln-report.md
          osv-scanner --format=json --output=osv-daily.json . || true
          
          if [ -s osv-daily.json ]; then
            echo "🚨 **OSV vulnerabilities detected**" >> vuln-report.md
          else
            echo "✅ No vulnerabilities found in OSV database" >> vuln-report.md
          fi
          
          # pip-audit
          echo "" >> vuln-report.md
          echo "## Pip Audit" >> vuln-report.md
          pip-audit --format=json --output=pip-audit-daily.json || true
          
          if [ -s pip-audit-daily.json ]; then
            echo "🚨 **Pip audit findings detected**" >> vuln-report.md
          else
            echo "✅ No pip audit findings" >> vuln-report.md
          fi
          
      - name: Check for critical vulnerabilities
        run: |
          critical_found=false
          
          # Check Safety results for critical
          if [ -s safety-daily.json ]; then
            if jq -e '.report.vulnerabilities[] | select(.severity == "critical")' safety-daily.json > /dev/null; then
              critical_found=true
            fi
          fi
          
          # Check OSV for critical
          if [ -s osv-daily.json ]; then
            if jq -e '.results[].packages[].vulnerabilities[] | select(.severity == "CRITICAL")' osv-daily.json > /dev/null; then
              critical_found=true
            fi
          fi
          
          echo "CRITICAL_VULNS=$critical_found" >> $GITHUB_ENV
          
      - name: Create security issue for critical vulnerabilities
        if: env.CRITICAL_VULNS == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('vuln-report.md', 'utf8');
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `## Critical Security Alert
              
**Automated security scan has detected critical vulnerabilities that require immediate attention.**

**Action Required:**
1. 🔴 **IMMEDIATE**: Review and address critical vulnerabilities
2. 📋 Update affected dependencies
3. 🧪 Test thoroughly after updates  
4. 🚀 Deploy fixes as soon as possible

**Priority:** 🔴 **CRITICAL** - Security vulnerabilities pose immediate risk

---

${report}

---

**Auto-generated by Security Monitoring Workflow**
**Date:** ${new Date().toISOString()}`,
              labels: ['security', 'critical', 'vulnerability', 'automated']
            });
            
            console.log(`Created critical security issue: ${issue.data.html_url}`);
            
      - name: Upload daily security reports
        uses: actions/upload-artifact@v3
        with:
          name: daily-security-report-${{ github.run_number }}
          path: |
            vuln-report.md
            safety-daily.json
            osv-daily.json
            pip-audit-daily.json

  dependency-audit:
    name: Advanced Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python  
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom pip-licenses pipdeptree
          pip install -r requirements.txt
          
      - name: Generate Software Bill of Materials
        run: |
          echo "# Software Bill of Materials (SBOM)" > sbom-report.md
          echo "Generated: $(date)" >> sbom-report.md
          echo "" >> sbom-report.md
          
          # Generate SBOM in multiple formats
          cyclonedx-py -i requirements.txt -o sbom.json --format json
          cyclonedx-py -i requirements.txt -o sbom.xml --format xml
          
          # License audit
          echo "## License Compliance" >> sbom-report.md
          pip-licenses --format=markdown >> sbom-report.md
          
          echo "" >> sbom-report.md
          
          # Dependency tree
          echo "## Dependency Tree" >> sbom-report.md
          echo '```' >> sbom-report.md
          pipdeptree >> sbom-report.md
          echo '```' >> sbom-report.md
          
      - name: Check for license conflicts
        run: |
          # Check for problematic licenses
          PROBLEMATIC_LICENSES="GPL-3.0 AGPL Copyleft"
          
          echo "" >> sbom-report.md
          echo "## License Conflict Analysis" >> sbom-report.md
          
          license_issues=false
          for license in $PROBLEMATIC_LICENSES; do
            if pip-licenses | grep -i "$license"; then
              echo "⚠️ Potentially problematic license detected: $license" >> sbom-report.md
              license_issues=true
            fi
          done
          
          if [ "$license_issues" = false ]; then
            echo "✅ No license conflicts detected" >> sbom-report.md
          fi
          
      - name: Upload SBOM and license report
        uses: actions/upload-artifact@v3
        with:
          name: sbom-audit-report-${{ github.run_number }}
          path: |
            sbom-report.md
            sbom.json
            sbom.xml

  infrastructure-security:
    name: Infrastructure Security Audit  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Audit Docker configuration
        run: |
          echo "# Infrastructure Security Audit" > infra-audit.md
          echo "Generated: $(date)" >> infra-audit.md
          echo "" >> infra-audit.md
          
          # Docker security check
          if [ -f "Dockerfile" ]; then
            echo "## Docker Security Analysis" >> infra-audit.md
            
            # Check for security best practices
            echo "### Security Best Practices Check" >> infra-audit.md
            
            if grep -q "^USER" Dockerfile; then
              user=$(grep "^USER" Dockerfile | tail -1 | cut -d' ' -f2)
              if [ "$user" != "root" ]; then
                echo "✅ Running as non-root user: $user" >> infra-audit.md
              else
                echo "❌ Running as root user - security risk!" >> infra-audit.md
              fi
            else
              echo "❌ No USER instruction found - likely running as root!" >> infra-audit.md
            fi
            
            if grep -q "^HEALTHCHECK" Dockerfile; then
              echo "✅ Health check configured" >> infra-audit.md
            else
              echo "⚠️ No health check configured" >> infra-audit.md
            fi
            
            # Check for secrets in Dockerfile
            if grep -iE "(password|secret|key|token).*=" Dockerfile; then
              echo "❌ Potential secrets found in Dockerfile!" >> infra-audit.md
            else
              echo "✅ No obvious secrets in Dockerfile" >> infra-audit.md
            fi
          fi
          
          # docker-compose security
          if [ -f "docker-compose.yml" ]; then
            echo "" >> infra-audit.md
            echo "## Docker Compose Security" >> infra-audit.md
            
            if grep -q "privileged.*true" docker-compose.yml; then
              echo "❌ Privileged containers detected!" >> infra-audit.md
            else
              echo "✅ No privileged containers" >> infra-audit.md
            fi
            
            if grep -q "network_mode.*host" docker-compose.yml; then
              echo "⚠️ Host networking detected" >> infra-audit.md
            else
              echo "✅ Isolated container networking" >> infra-audit.md
            fi
          fi
          
          # GitHub workflow security
          echo "" >> infra-audit.md
          echo "## GitHub Workflows Security" >> infra-audit.md
          
          workflow_issues=false
          for workflow in .github/workflows/*.yml; do
            if grep -q "shell:" "$workflow"; then
              echo "⚠️ Shell commands found in $workflow - review required" >> infra-audit.md
              workflow_issues=true
            fi
            
            if grep -q "\${{" "$workflow" | grep -v "secrets\|github\."; then
              echo "⚠️ Potential injection risk in $workflow" >> infra-audit.md
              workflow_issues=true
            fi
          done
          
          if [ "$workflow_issues" = false ]; then
            echo "✅ No obvious workflow security issues" >> infra-audit.md
          fi
          
      - name: Upload infrastructure audit
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure-security-audit
          path: infra-audit.md

  compliance-monitoring:
    name: Security Compliance Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check security policy compliance
        run: |
          echo "# Security Policy Compliance Report" > compliance-report.md
          echo "Generated: $(date)" >> compliance-report.md
          echo "" >> compliance-report.md
          
          # Check for required security files
          echo "## Required Security Documentation" >> compliance-report.md
          
          security_files=(
            "SECURITY.md:Security Policy"
            ".github/SECURITY.md:GitHub Security Policy"
            "docs/SECURITY.md:Extended Security Documentation"
          )
          
          for entry in "${security_files[@]}"; do
            file="${entry%:*}"
            description="${entry#*:}"
            
            if [ -f "$file" ]; then
              echo "✅ $description found at $file" >> compliance-report.md
            else
              echo "❌ $description missing at $file" >> compliance-report.md
            fi
          done
          
          # Check workflow security
          echo "" >> compliance-report.md
          echo "## GitHub Actions Security Compliance" >> compliance-report.md
          
          # Check for proper permissions
          workflow_count=0
          workflows_with_permissions=0
          
          for workflow in .github/workflows/*.yml; do
            if [ -f "$workflow" ]; then
              workflow_count=$((workflow_count + 1))
              if grep -q "permissions:" "$workflow"; then
                workflows_with_permissions=$((workflows_with_permissions + 1))
              fi
            fi
          done
          
          echo "Workflows with explicit permissions: $workflows_with_permissions/$workflow_count" >> compliance-report.md
          
          if [ "$workflows_with_permissions" -eq "$workflow_count" ]; then
            echo "✅ All workflows have explicit permissions" >> compliance-report.md
          else
            echo "⚠️ Some workflows missing explicit permissions" >> compliance-report.md
          fi
          
          # Check for security in requirements
          echo "" >> compliance-report.md
          echo "## Security Dependencies" >> compliance-report.md
          
          security_deps=("cryptography" "werkzeug" "flask" "requests")
          outdated_count=0
          
          for dep in "${security_deps[@]}"; do
            if grep -q "$dep" requirements.txt; then
              current_version=$(grep "$dep==" requirements.txt | cut -d'=' -f3)
              echo "📦 $dep: $current_version" >> compliance-report.md
            fi
          done
          
      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: security-compliance-report
          path: compliance-report.md
          
      - name: Create weekly compliance issue
        if: github.event.schedule == '0 6 * * 1'  # Monday only
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('compliance-report.md')) {
              const report = fs.readFileSync('compliance-report.md', 'utf8');
              
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `📊 Weekly Security Compliance Report - ${new Date().toISOString().split('T')[0]}`,
                body: `## Weekly Security Compliance Review
                
This automated report provides a weekly overview of our security compliance status.

**Review Items:**
- [ ] Security documentation is up to date
- [ ] All workflows have proper permissions
- [ ] Dependencies are current and secure  
- [ ] No critical vulnerabilities present

---

${report}

---

**Auto-generated by Security Monitoring**`,
                labels: ['security', 'compliance', 'weekly-review']
              });
              
              console.log(`Created weekly compliance issue: ${issue.data.html_url}`);
            }

  secret-rotation-reminder:
    name: Secret Rotation Reminder
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 1 * *'  # First day of month
    
    steps:
      - name: Create monthly secret rotation reminder
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔐 Monthly Secret Rotation Reminder - ${new Date().toISOString().split('T')[0]}`,
              body: `## Monthly Security Maintenance

This is a monthly reminder to review and potentially rotate secrets and credentials.

### Action Items:
- [ ] Review GitHub repository secrets
- [ ] Check application credentials (Admin password)
- [ ] Verify API tokens and keys are still valid
- [ ] Review access permissions for team members
- [ ] Check for unused secrets that can be removed

### Security Best Practices:
- Rotate secrets every 90 days minimum
- Use strong, unique passwords
- Enable 2FA where possible
- Audit access logs regularly

### Repository Secrets to Review:
- ADMIN_PASSWORD
- SECRET_KEY  
- GITHUB_TOKEN (if custom)
- SLACK_WEBHOOK (if used)
- SNYK_TOKEN (if used)

**Priority:** Medium
**Due Date:** Within 7 days

---

**Auto-generated monthly reminder**`,
              labels: ['security', 'maintenance', 'monthly', 'secrets'],
              assignees: ['Ralle1976']
            });
            
            console.log(`Created monthly secret rotation reminder: ${issue.data.html_url}`);

  security-metrics:
    name: Security Metrics Collection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Collect security metrics
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "# Security Metrics Dashboard" > security-metrics.md
          echo "Generated: $(date)" >> security-metrics.md
          echo "" >> security-metrics.md
          
          # Repository security features status
          echo "## Repository Security Status" >> security-metrics.md
          
          # Use GitHub CLI to get repository info
          repo_info=$(gh api repos/${{ github.repository }} --jq '{
            vulnerability_alerts: .has_vulnerability_alerts_enabled,
            automated_security_fixes: .has_automated_security_fixes_enabled,
            private: .private,
            default_branch: .default_branch
          }')
          
          echo '```json' >> security-metrics.md
          echo "$repo_info" >> security-metrics.md
          echo '```' >> security-metrics.md
          
          # Security advisories
          echo "" >> security-metrics.md
          echo "## Security Advisories" >> security-metrics.md
          
          advisory_count=$(gh api repos/${{ github.repository }}/security-advisories --jq 'length' 2>/dev/null || echo "0")
          echo "Open security advisories: $advisory_count" >> security-metrics.md
          
          # Dependabot alerts
          echo "" >> security-metrics.md
          echo "## Dependabot Security Alerts" >> security-metrics.md
          
          alert_count=$(gh api repos/${{ github.repository }}/dependabot/alerts --jq 'length' 2>/dev/null || echo "N/A")
          echo "Open Dependabot alerts: $alert_count" >> security-metrics.md
          
      - name: Upload security metrics
        uses: actions/upload-artifact@v3
        with:
          name: security-metrics-${{ github.run_number }}
          path: security-metrics.md

  notify-security-status:
    name: Security Status Notification
    runs-on: ubuntu-latest
    needs: [vulnerability-monitoring, dependency-audit, compliance-monitoring, security-metrics]
    if: always()
    
    steps:
      - name: Determine overall security status
        run: |
          # Check if any critical jobs failed
          if [[ "${{ needs.vulnerability-monitoring.result }}" == "failure" ]] || 
             [[ "${{ needs.dependency-audit.result }}" == "failure" ]] ||
             [[ "${{ needs.compliance-monitoring.result }}" == "failure" ]]; then
            echo "SECURITY_STATUS=failure" >> $GITHUB_ENV
            echo "STATUS_EMOJI=🚨" >> $GITHUB_ENV
            echo "STATUS_MESSAGE=Critical security issues detected" >> $GITHUB_ENV
          elif [[ "${{ needs.vulnerability-monitoring.result }}" == "success" ]] &&
               [[ "${{ needs.dependency-audit.result }}" == "success" ]] &&
               [[ "${{ needs.compliance-monitoring.result }}" == "success" ]]; then
            echo "SECURITY_STATUS=success" >> $GITHUB_ENV 
            echo "STATUS_EMOJI=✅" >> $GITHUB_ENV
            echo "STATUS_MESSAGE=All security checks passed" >> $GITHUB_ENV
          else
            echo "SECURITY_STATUS=warning" >> $GITHUB_ENV
            echo "STATUS_EMOJI=⚠️" >> $GITHUB_ENV
            echo "STATUS_MESSAGE=Some security checks had issues" >> $GITHUB_ENV
          fi
          
      - name: Send Slack notification
        if: env.SECURITY_STATUS == 'failure' || github.event.schedule == '0 6 * * 1'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ env.STATUS_EMOJI }} Daily Security Monitoring Report",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ env.STATUS_EMOJI }} Security Status: ${{ env.STATUS_MESSAGE }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn", 
                      "text": "*Repository:* ${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Date:* $(date +%Y-%m-%d)"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Vulnerability Scan:* ${{ needs.vulnerability-monitoring.result }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Compliance Check:* ${{ needs.compliance-monitoring.result }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Full Report"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}